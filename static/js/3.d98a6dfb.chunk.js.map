{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatus.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","style","profileStatus","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","ProfileInfo","profile","Preloader","photoLarge","photos","large","profileInfo","wall","src","alt","profileAvatar","avatar","photoNull","profileDescription","fullName","contacts","vk","aboutMe","Post","post","message","userPhoto","deletePost","likesCount","maxLength10","maxLengthCreator","MyPosts","React","memo","postsElements","posts","map","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","allPosts","reduxForm","form","handleSubmit","Field","name","component","Textarea","validate","required","placeholder","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","store","ProfileContainer","userId","this","match","params","autorizedUserId","history","push","getUserProfile","getStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.d98a6dfb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__2lmay\",\"wall\":\"ProfileInfo_wall__1nf33\",\"avatar\":\"ProfileInfo_avatar__2OEYd\",\"profile\":\"ProfileInfo_profile__2S0va\",\"profileDescription\":\"ProfileInfo_profileDescription__3SE8y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileStatus\":\"ProfileStatus_profileStatus__1Vass\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__1J4i3\",\"button\":\"MyPosts_button__2N1r6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__5oSte\",\"message\":\"Post_message__3fvDS\",\"deletePost\":\"Post_deletePost__339GP\"};","import React, { useState, useEffect } from 'react';\r\nimport style from './ProfileStatus.module.css';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n  /* функция useState (hook) возвращает массив из двух элементов:\r\n   1 - это значение которое передали: false\r\n   2 - функция которая меняет значение false */\r\n   let [editMode, setEditMode] = useState(false); //локальный state, если true то отображается input, если false то span\r\n   let [status, setStatus] = useState(props.status);\r\n\r\n   useEffect( () => {\r\n    setStatus(props.status);\r\n   }, [props.status]); //функция выполнится после отрисовки компоненты, вторым значением вводим зависимость от статуса, если изменился то запускаем useEffect\r\n\r\n  const activateEditMode = () => { //при двойном клике меняем editMode на true\r\n    setEditMode(true);\r\n  }\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status) //добавиляем измененный статус в state\r\n  }\r\n\r\n  const onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value);\r\n  }\r\n\r\n  return (\r\n    <div className={style.profileStatus}>\r\n      { !editMode &&\r\n        <div>\r\n          <span onDoubleClick={ activateEditMode }>{props.status || \"Change your status\"} </span>\r\n        </div>\r\n      }\r\n      { editMode &&\r\n        <div>\r\n           <input autoFocus={ true } onBlur={ deactivateEditMode } onChange={ onStatusChange } value= { status }/>\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport photoNull from '../../../assets/images/photo.png';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport style from './ProfileInfo.module.css';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}) => {\r\n  /* станица рендерится сразу не дожидаясь данных, поэтому если в profile ничего нет (в profile-reducer в profile записан null)\r\n    то загружаем Preloader, когда данные засетаются компонента обновится и вернется разметка jsx ниже */\r\n  if(!profile) { return <Preloader /> }\r\n  \r\n  let photoLarge = profile.photos.large;\r\n  \r\n  return (\r\n    <div className={style.profileInfo}>\r\n      <img className={style.wall} src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQf8s2dl5j784guvwzq_l1yW19jvlsTCXBPPY-hfRZcsp9q_YEd5w&s\" alt=\"avatar\"/>\r\n      <div className={style.profile}>\r\n        <div className={style.profileAvatar}>\r\n          <img className={style.avatar} src={ photoLarge ? photoLarge : photoNull }  alt=\"\"/>\r\n          <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n        </div>\r\n        <div className={style.profileDescription}>\r\n          <p><strong>Full Name:</strong> {profile.fullName}</p>\r\n          <p><strong>Contacts:</strong> {profile.contacts.vk}</p>\r\n          <p><strong>About Me:</strong> {profile.aboutMe}</p>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport style from './Post.module.css';\r\nimport userPhoto from '../../../../assets/images/photo.png';\r\n\r\n\r\nconst Post = (props) => {\r\n\r\n  return (\r\n    <div className={style.post}>\r\n      <div className={style.message}>\r\n        <img src={userPhoto} alt=\"\" />\r\n        <div>{props.message}</div>\r\n        <button className={style.deletePost}>x</button>\r\n      </div>\r\n      <div>like: {props.likesCount}</div>\r\n    </div>\r\n    );\r\n  }\r\n\r\nexport default Post;","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validator';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nimport style from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10); // если > 10 символов то ошибка\r\n\r\nconst MyPosts = React.memo( (props) => { //React.memo оборачивает компоненту и перерисовывает ее только когда были изменены пропсы или state\r\n\r\n  // shouldComponentUpdate(nextProps, nextState) { //применяется в классовой компоненте, отрисовывается если пришли новые props или state\r\n  //   return nextProps !== this.props || nextState !== this.state; //вернем true если props или state изменился\r\n  // }\r\n\r\n    let postsElements = props.posts.map( e => <Post message={e.message} likesCount={e.likesCount}/>);\r\n    const onAddPost = (values) => { props.addPost(values.newPostText); }; //диспатчим текст из формы\r\n    return (\r\n      <div className = { style.posts }>\r\n        <p>My posts:</p>\r\n        <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n        <div className = { style.allPosts }> { postsElements } </div>\r\n      </div>\r\n    );\r\n});\r\n\r\nconst AddNewPostForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field name=\"newPostText\" component={Textarea} validate={ [required, maxLength10] } placeholder={\"Post message\"}/>\r\n      <button>Add post</button>\r\n    </form>)\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"}) (AddNewPostForm); //обязательно оборачиваем в reduxForm\r\n\r\nexport default MyPosts;","import { connect } from 'react-redux';\r\nimport { addPostActionCreator } from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (newPostText) => {\r\n      dispatch(addPostActionCreator(newPostText));\r\n    }\r\n  }\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport style from './Profile.module.css';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\nconst Profile = (props) => {\r\n  return (\r\n    <div className={style.profile}>\r\n      <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n      <MyPostsContainer store={props.store} />\r\n    </div>\r\n    )\r\n  }\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { getStatus, getUserProfile, updateStatus } from '../../redux/profile-reducer';\r\nimport Profile from './Profile';\r\n\r\n//создаем контейнерную компоненту, которая будет слать запросы на сервер\r\n//передаем все пропсы дальше в другую компоненту\r\n//проверить что придет в пропсах если убрать спред оператор ...\r\nclass ProfileContainer extends React.Component {\r\n\r\n  componentDidMount() {\r\n    /* в App.js в Route в path добавили параметр userId который отображается в props.match.params.userId */\r\n    let userId = this.props.match.params.userId;\r\n    if(!userId) {\r\n      userId = this.props.autorizedUserId; //мой id из state\r\n      if(!userId) {//если нет UserId то переходим на страницу login\r\n        this.props.history.push(\"/login\");\r\n      }\r\n    }\r\n    this.props.getUserProfile(userId); //реализовали через thunk из пропсов в profile-reduser\r\n    this.props.getStatus(userId);\r\n  }\r\n  render() {\r\n    return (\r\n      <Profile {...this.props}\r\n              profile={this.props.profile}\r\n              status={this.props.status}\r\n              updateStatus={this.props.updateStatus}/>\r\n    )\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  autorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\n  /* ProfileContainer прокидываем в  withAuthRedirect и затем дальше вверх*/\r\nexport default compose(\r\n  connect (mapStateToProps, { getUserProfile, getStatus, updateStatus }),\r\n  withRouter,\r\n) (ProfileContainer);"],"sourceRoot":""}